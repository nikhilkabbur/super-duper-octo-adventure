# super-duper-octo-adventure
#collector bot using rpi
# import curses and GPIO
import curses
import RPi.GPIO as GPIO
import os #added so we can shut down OK
import time #import time module
GPIO.setwarnings(False)
#set GPIO numbering mode and define output pins
GPIO.setmode(GPIO.BOARD)
GPIO.setup(11,GPIO.OUT)
GPIO.setup(19,GPIO.OUT)
GPIO.setup(13,GPIO.OUT)
GPIO.setup(15,GPIO.OUT)

servoL=36
servoR=12
servoUD=37
servoHG=16
GPIO.setup(servoL,GPIO.OUT)
GPIO.setup(servoR,GPIO.OUT)
GPIO.setup(servoUD,GPIO.OUT)
GPIO.setup(servoHG,GPIO.OUT)

pwml=GPIO.PWM(servoL,50)
pwmr=GPIO.PWM(servoR,50)
pwmu=GPIO.PWM(servoUD,50)
pwmg=GPIO.PWM(servoHG,50)
pwml.start(7)
pwmr.start(7)
pwmu.start(7)
pwmg.start(7)

screen = curses.initscr()
curses.noecho() 
curses.cbreak()
screen.keypad(True)

try:
        while True:
            char = screen.getch()
            if char == ord('q'):
                break
            elif char == curses.KEY_UP:
                GPIO.output(19,True)
                GPIO.output(11,False)
                GPIO.output(13,True)
                GPIO.output(15,False)
                ac=1./18.*(115)+2
                pwml.ChangeDutyCycle(ac)
                dc=1./18.*(40)+2
                pwmr.ChangeDutyCycle(dc)
            elif char == curses.KEY_DOWN:
                GPIO.output(19,False)
                GPIO.output(11,True)
                GPIO.output(13,False)
                GPIO.output(15,True)
                ac=1./18.*(115)+2
                pwml.ChangeDutyCycle(ac)
                dc=1./18.*(40)+2
                pwmr.ChangeDutyCycle(dc)
            elif char == curses.KEY_RIGHT:
                GPIO.output(19,False)
                GPIO.output(11,True)
                GPIO.output(13,True)
                GPIO.output(15,False)
                ac=1./18.*(65)+2
                pwml.ChangeDutyCycle(ac)
                dc=1./18.*(0)+2
                pwmr.ChangeDutyCycle(dc)
            elif char == curses.KEY_LEFT:
                GPIO.output(19,True)
                GPIO.output(11,False)
                GPIO.output(13,False)
                GPIO.output(15,True)
                ac=1./18.*(180)+2
                pwml.ChangeDutyCycle(ac)
                dc=1./18.*(85)+2
                pwmr.ChangeDutyCycle(dc)
            if char == ord('u'):#lifting up
                ld=1./18.*(70)+2
                pwmu.ChangeDutyCycle(ld)
            if char == ord('v'):#lifting down
                dl=1./18.*(180)+2
                pwmu.ChangeDutyCycle(dl)
            if char == ord('g'):#grip on
                gr=1./18.*(92)+2
                pwmg.ChangeDutyCycle(gr)
            if char == ord('r'):#grip release
                desiredpos=10
                rg=1./18.*(140)+2
                pwmg.ChangeDutyCycle(rg)
                
            elif char == 10:
                GPIO.output(19,False)
                GPIO.output(11,False)
                GPIO.output(13,False)
                GPIO.output(15,False)
             
finally:
    #Close down curses properly, inc turn echo back on!
    curses.nocbreak(); screen.keypad(0); curses.echo()
    curses.endwin()
    GPIO.cleanup()
